// Generated by gencpp from file yui_bathing/PerceptionRequest.msg
// DO NOT EDIT!


#ifndef YUI_BATHING_MESSAGE_PERCEPTIONREQUEST_H
#define YUI_BATHING_MESSAGE_PERCEPTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yui_bathing
{
template <class ContainerAllocator>
struct PerceptionRequest_
{
  typedef PerceptionRequest_<ContainerAllocator> Type;

  PerceptionRequest_()
    : segment(false)  {
    }
  PerceptionRequest_(const ContainerAllocator& _alloc)
    : segment(false)  {
  (void)_alloc;
    }



   typedef uint8_t _segment_type;
  _segment_type segment;





  typedef boost::shared_ptr< ::yui_bathing::PerceptionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yui_bathing::PerceptionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionRequest_

typedef ::yui_bathing::PerceptionRequest_<std::allocator<void> > PerceptionRequest;

typedef boost::shared_ptr< ::yui_bathing::PerceptionRequest > PerceptionRequestPtr;
typedef boost::shared_ptr< ::yui_bathing::PerceptionRequest const> PerceptionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yui_bathing::PerceptionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yui_bathing::PerceptionRequest_<ContainerAllocator1> & lhs, const ::yui_bathing::PerceptionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.segment == rhs.segment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yui_bathing::PerceptionRequest_<ContainerAllocator1> & lhs, const ::yui_bathing::PerceptionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yui_bathing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yui_bathing::PerceptionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yui_bathing::PerceptionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yui_bathing::PerceptionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34a9ade5b9b5417acbb138ee4ce27f21";
  }

  static const char* value(const ::yui_bathing::PerceptionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34a9ade5b9b5417aULL;
  static const uint64_t static_value2 = 0xcbb138ee4ce27f21ULL;
};

template<class ContainerAllocator>
struct DataType< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yui_bathing/PerceptionRequest";
  }

  static const char* value(const ::yui_bathing::PerceptionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool segment\n"
;
  }

  static const char* value(const ::yui_bathing::PerceptionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yui_bathing::PerceptionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yui_bathing::PerceptionRequest_<ContainerAllocator>& v)
  {
    s << indent << "segment: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.segment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YUI_BATHING_MESSAGE_PERCEPTIONREQUEST_H
