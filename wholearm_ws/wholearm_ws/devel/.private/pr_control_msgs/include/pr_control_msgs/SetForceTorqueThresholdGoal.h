// Generated by gencpp from file pr_control_msgs/SetForceTorqueThresholdGoal.msg
// DO NOT EDIT!


#ifndef PR_CONTROL_MSGS_MESSAGE_SETFORCETORQUETHRESHOLDGOAL_H
#define PR_CONTROL_MSGS_MESSAGE_SETFORCETORQUETHRESHOLDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr_control_msgs
{
template <class ContainerAllocator>
struct SetForceTorqueThresholdGoal_
{
  typedef SetForceTorqueThresholdGoal_<ContainerAllocator> Type;

  SetForceTorqueThresholdGoal_()
    : force_threshold(0.0)
    , torque_threshold(0.0)
    , retare(false)  {
    }
  SetForceTorqueThresholdGoal_(const ContainerAllocator& _alloc)
    : force_threshold(0.0)
    , torque_threshold(0.0)
    , retare(false)  {
  (void)_alloc;
    }



   typedef double _force_threshold_type;
  _force_threshold_type force_threshold;

   typedef double _torque_threshold_type;
  _torque_threshold_type torque_threshold;

   typedef uint8_t _retare_type;
  _retare_type retare;





  typedef boost::shared_ptr< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SetForceTorqueThresholdGoal_

typedef ::pr_control_msgs::SetForceTorqueThresholdGoal_<std::allocator<void> > SetForceTorqueThresholdGoal;

typedef boost::shared_ptr< ::pr_control_msgs::SetForceTorqueThresholdGoal > SetForceTorqueThresholdGoalPtr;
typedef boost::shared_ptr< ::pr_control_msgs::SetForceTorqueThresholdGoal const> SetForceTorqueThresholdGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator1> & lhs, const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator2> & rhs)
{
  return lhs.force_threshold == rhs.force_threshold &&
    lhs.torque_threshold == rhs.torque_threshold &&
    lhs.retare == rhs.retare;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator1> & lhs, const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5d09cefad81aea029dbb143ca87e1e5";
  }

  static const char* value(const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5d09cefad81aea0ULL;
  static const uint64_t static_value2 = 0x29dbb143ca87e1e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr_control_msgs/SetForceTorqueThresholdGoal";
  }

  static const char* value(const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float64 force_threshold\n"
"float64 torque_threshold\n"
"bool retare\n"
;
  }

  static const char* value(const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force_threshold);
      stream.next(m.torque_threshold);
      stream.next(m.retare);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetForceTorqueThresholdGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr_control_msgs::SetForceTorqueThresholdGoal_<ContainerAllocator>& v)
  {
    s << indent << "force_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.force_threshold);
    s << indent << "torque_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.torque_threshold);
    s << indent << "retare: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retare);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR_CONTROL_MSGS_MESSAGE_SETFORCETORQUETHRESHOLDGOAL_H
